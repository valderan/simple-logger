export type Locale = 'en' | 'ru';

export type TranslationRecord = {
  [key: string]: string | TranslationRecord;
};

export const translations: Record<Locale, TranslationRecord> = {
  en: {
    common: {
      projectName: 'Simple Logger',
      loading: 'Loading data...',
      saving: 'Saving...',
      create: 'Create',
      add: 'Add',
      delete: 'Delete',
      edit: 'Edit',
      cancel: 'Cancel',
      close: 'Close',
      confirm: 'Confirm',
      retry: 'Retry',
      error: 'Error',
      unexpectedError: 'Unexpected error. Please try again.',
      success: 'Success',
      filters: 'Filters',
      hide: 'Hide',
      show: 'Show',
      apply: 'Apply',
      export: 'Export',
      notAvailable: '—',
      minutesShort: 'min',
      yes: 'Yes',
      no: 'No',
      off: 'Off',
      on: 'On',
      copy: 'Copy',
      uuid: 'UUID',
      telegram: 'Telegram',
      debug: 'Debug',
      showMoreFilters: 'Show additional filters',
      hideFilters: 'Hide additional filters',
      empty: 'Not specified',
      applyFilters: 'Apply filters',
      exportCsv: 'Export to CSV',
      deleteByFilter: 'Delete by filter',
      deleteInProgress: 'Deleting...',
      loadingLogs: 'Loading logs...',
      loadingProject: 'Loading project...',
      loadingSystemLogs: 'Loading system logs...',
      removing: 'Removing...',
      checking: 'Checking...',
      savingChanges: 'Saving changes...',
      creatingProject: 'Creating project...',
      savingWhitelist: 'Saving...',
      refresh: 'Refresh'
    },
    auth: {
      title: 'Logger Sign In',
      description:
        'Enter administrator credentials. After five failed attempts the IP address will be blocked for one hour.',
      username: 'Username',
      password: 'Password',
      submit: 'Sign in',
      submitting: 'Signing in...',
      blocked: 'IP temporarily blocked.',
      failed: 'Sign-in failed',
      themeLight: 'Switch to light theme',
      themeDark: 'Switch to dark theme',
      languageToggle: 'Switch language',
      logoAlt: 'Simple Logger logo',
      apiUrlLabel: 'API URL',
      apiUrlPlaceholder: 'https://example.com/api',
      apiUrlHelp: 'Specify the API base URL you want to use.'
    },
    navigation: {
      dashboard: 'Dashboard',
      projects: 'Projects',
      logs: 'Logs',
      ping: 'Ping monitoring',
      addProject: 'Add project',
      telegram: 'Telegram',
      settings: 'Settings',
      faq: 'Help & FAQ',
      language: 'Language',
      collapse: 'Collapse menu',
      expand: 'Expand menu',
      toggleThemeLight: 'Switch to light theme',
      toggleThemeDark: 'Switch to dark theme',
      logout: 'Sign out',
      appBarTitle: 'Control panel',
      versionLabel: 'Version {{version}}',
      openMenu: 'Open navigation menu',
      showControls: 'Open control panel',
      hideControls: 'Hide control panel',
      closeControls: 'Hide control panel'
    },
    dashboard: {
      title: 'Overview',
      totalProjects: 'Projects total',
      totalProjectsDescription: 'Log management and alerts',
      pingMonitoring: 'Ping monitoring',
      pingMonitoringDescription: 'Active availability checks',
      telegramEnabled: 'Telegram alerts',
      telegramEnabledDescription: 'Projects with active notifications',
      logDistribution: 'Log distribution by level',
      apiUrlLabel: 'API base URL',
      apiUrlDescription: '',
      apiUrlNotConfigured: 'Not configured',
      rateLimitInfo: 'Rate limit: {{value}} requests/min',
      rateLimitUnknown: 'Rate limit information is unavailable.',
      incidents: 'Latest incidents',
      noIncidents: 'No critical incidents detected.',
      incidentMeta: 'IP: {{ip}} · Service: {{service}} · User: {{user}}',
      activeProjects: 'Active projects',
      createdAt: 'UUID: {{uuid}} · Created: {{date}} · Access: {{access}}',
      loadError: 'Failed to load dashboard data',
      logsDatasetLabel: 'Log count'
    },
    projects: {
      title: 'Projects',
      searchPlaceholder: 'Search by name, description or UUID',
      addProject: 'Add project',
      noProjects: 'No projects',
      menu: 'Menu',
      totalRows: '{{visible}} of {{total}}',
      telegramEnabled: 'Enabled',
      telegramDisabled: 'Disabled',
      telegramRecipients: 'Recipients: {{count}}',
      descriptionMissing: 'Description not specified',
      actions: 'Actions',
      logs: 'Logs',
      edit: 'Edit',
      delete: 'Delete',
      ping: 'Ping',
      copyUuid: 'Copy UUID',
      deleteError: 'Failed to delete project',
      loadError: 'Failed to load projects',
      columns: {
        name: 'Name',
        uuid: 'UUID',
        telegram: 'Telegram',
        access: 'Access',
        createdAt: 'Created',
        actions: 'Actions'
      },
      rateLimit: 'Rate limit: {{value}} req/min',
      rateLimitUnlimited: 'Rate limit: unlimited',
      rateLimitUnknown: 'Rate limit: unknown',
      deleteDialogTitle: 'Delete project',
      deleteDialogDescription:
        'This action will delete the project "{{name}}" and all related logs. To confirm, enter the full project name.',
      deleteDialogLabel: 'Project name',
      deleteDialogCancel: 'Cancel',
      deleteDialogConfirm: 'Delete',
      deleteDialogConfirming: 'Deleting...',
      deleteDialogError: 'Failed to delete project',
      projectDeletionWarning: 'To confirm deletion, enter the project name exactly as it appears.'
    },
    projectForm: {
      name: 'Project name',
      description: 'Description',
      logFormat: 'Log format (JSON)',
      accessLevel: 'Access level',
      accessGlobal: 'Global',
      accessWhitelist: 'Whitelist',
      accessDocker: 'Docker only',
      debugMode: 'Debug mode (no Telegram notifications)',
      tagsTitle: 'Tags',
      customTags: 'Custom tags',
      newTag: 'New tag',
      addTag: 'Add tag',
      noCustomTags: 'No custom tags configured',
      telegramNotifications: 'Send notifications to Telegram',
      antiSpam: 'Anti-spam interval (min)',
      recipients: 'Notification recipients',
      chatId: 'Chat ID',
      tagsPlaceholder: 'Tags (comma separated)',
      addRecipient: 'Add recipient',
      noRecipients: 'Recipients are not configured',
      recipientTags: 'Tags: {{tags}}',
      recipientAllTags: 'Receives all events',
      validationError: 'Log format must be a valid JSON.',
      cancel: 'Cancel',
      submit: 'Save',
      submitting: 'Saving...',
      telegramTagsHelper: 'Example: PING_DOWN,CRITICAL',
      telegramTagsLabel: 'Telegram tags (comma separated)',
      recipientsCount: 'Recipients ({{count}})',
      antiSpamHint: 'Anti-spam interval: {{interval}} min.',
      rateLimitGlobal: 'Rate limit: {{value}} requests/min (configured under Security settings).',
      rateLimitGlobalUnknown: 'Rate limit follows the global security setting (default 120 requests/min).',
      rateLimitBypass: 'Whitelist and Docker-only projects bypass the global rate limit.',
      maxLogEntriesLabel: 'Max stored log entries',
      maxLogEntriesHelper: 'Set to 0 to keep all logs without restrictions.',
      maxLogEntriesLocked: 'Logger Core always keeps all system logs.',
      telegramDeepLinksTitle: 'Telegram commands',
      telegramSubscribeLink: 'Subscribe command (ADD)',
      telegramUnsubscribeLink: 'Unsubscribe command (DELETE)',
      telegramCopyLink: 'Copy command',
      telegramLinkCopiedSubscribe: 'Subscribe command copied to clipboard.',
      telegramLinkCopiedUnsubscribe: 'Unsubscribe command copied to clipboard.',
      telegramLinkCopyError: 'Failed to copy command. Try again.',
      telegramLinkUnavailable: 'Unable to prepare the command. Ensure the bot is active.',
      telegramLinkUnavailableShort: 'Not available',
      telegramLinkSaveNotice: 'Save the project to generate commands automatically.',
      telegramLinkBotInactive: 'Telegram bot is inactive or URL is unknown.'
    },
    addProject: {
      title: 'Create project',
      submit: 'Create project',
      cancel: 'Cancel',
      loading: 'Creating project...',
      error: 'Failed to create project'
    },
    editProject: {
      title: 'Edit project',
      submit: 'Save changes',
      loading: 'Saving changes...',
      delete: 'Delete project',
      loadError: 'Project not found',
      missingUuid: 'Project UUID is not specified',
      deleting: 'Deleting...',
      deleteError: 'Failed to delete project',
      loadInProgress: 'Loading project...',
      error: 'Failed to update project'
    },
    logs: {
      title: 'Logs viewer',
      project: 'Project',
      projectUuid: 'Project UUID',
      level: 'Level',
      logId: 'Log ID',
      allLevels: 'All',
      tag: 'Tag',
      text: 'Text',
      user: 'User',
      ip: 'IP',
      service: 'Service',
      startDate: 'Start',
      endDate: 'End',
      showFilters: 'Show additional filters',
      hideFilters: 'Hide additional filters',
      apply: 'Apply filters',
      clear: 'Clear filter',
      export: 'Export to CSV',
      deleteByFilter: 'Delete by filter',
      deleting: 'Deleting...',
      loadError: 'Failed to load projects',
      logsLoadError: 'Failed to load logs',
      filtersApplied: 'Logs found: {{count}}. Project: {{project}}',
      noLogs: 'Logs not found for selected filters',
      filtersToggle: 'Additional filters',
      deleteConfirm: 'Delete by filter',
      detailsToggleLabel: 'Open log details on row click',
      detailsDialogTitle: 'Log details',
      detailsRaw: 'Raw entry',
      levelOptions: {
        debug: 'DEBUG',
        info: 'INFO',
        warning: 'WARNING',
        error: 'ERROR',
        critical: 'CRITICAL',
        all: 'All'
      },
      actionsHeader: 'Actions',
      metadata: {
        ip: 'IP: {{value}}',
        clientIp: 'Client IP: {{value}}',
        service: 'Service: {{value}}',
        user: 'User: {{value}}'
      },
      metadataHeader: 'Metadata',
      messageHeader: 'Message',
      timestampHeader: 'Timestamp',
      tagsLabel: 'Tags: {{tags}}',
      copyLog: 'Copy log entry',
      deleteLog: 'Delete log entry'
    },
    ping: {
      title: 'Ping monitoring',
      project: 'Project',
      addService: 'Add service',
      trigger: 'Run check',
      triggering: 'Checking...',
      newService: 'New ping service',
      name: 'Name',
      url: 'URL',
      interval: 'Interval (sec)',
      telegramTags: 'Telegram tags (comma separated)',
      telegramTagsHint: 'Example: PING_DOWN,CRITICAL',
      cancel: 'Cancel',
      save: 'Add',
      update: 'Save changes',
      saving: 'Saving...',
      intervalHint: 'Minimum interval: {{min}} seconds.',
      noServices: 'No services configured',
      loadProjectsError: 'Failed to load projects list',
      loadServicesError: 'Failed to load ping services',
      detailsTitle: 'Service details',
      detailsUrl: 'URL',
      detailsInterval: 'Interval: {{value}} seconds',
      detailsTags: 'Tags',
      detailsNoTags: 'No tags configured',
      detailsStatus: 'Status',
      detailsLastCheck: 'Last check',
      detailsNotChecked: 'No checks performed yet',
      detailsCreated: 'Created',
      detailsUpdated: 'Updated',
      status: {
        ok: 'OK',
        degraded: 'Degraded',
        down: 'Unavailable',
        unknown: '—'
      },
      intervalHeader: 'Interval (sec)',
      statusHeader: 'Status',
      lastCheckHeader: 'Last check',
      telegramTagsHeader: 'Telegram tags',
      actionsHeader: 'Actions',
      lastCheckedRelative: '{{value}}',
      noTags: 'No tags',
      checkAction: 'Check',
      projectCheckTriggered: 'Manual check for all services started.',
      serviceCheckTriggered: 'Manual check for the service started.',
      triggerError: 'Failed to trigger check.',
      serviceCreated: 'Ping service added.',
      saveError: 'Failed to save ping service.',
      serviceUpdated: 'Ping service updated.',
      updateError: 'Failed to update ping service.',
      serviceDeleted: 'Ping service deleted.',
      deleteError: 'Failed to delete ping service.',
      editService: 'Edit',
      deleteService: 'Delete',
      deleting: 'Deleting...',
      deleteDialogTitle: 'Delete ping service',
      deleteDialogDescription: 'Delete the ping service "{{name}}"? Checks will no longer run.'
    },
    telegram: {
      title: 'Telegram integration',
      info: 'To send notifications you must set the bot token in the BOT_API_KEY environment variable on the backend. Recipients are configured per project.',
      connected: 'Telegram bot is connected.',
      openChat: 'Open Telegram chat',
      tokenProvidedNoBot: 'Bot token is configured but the bot is not running. Check the backend logs.',
      statusLoadError: 'Failed to load Telegram bot status.',
      loadError: 'Failed to load projects',
      notificationsEnabled: 'Notifications enabled',
      notificationsDisabled: 'Notifications disabled',
      recipients: 'Recipients ({{count}})',
      noRecipients: 'Recipients are not configured. Add them when creating the project or update backend settings.',
      receivesAll: 'Receives all events',
      antiSpam: 'Anti-spam interval: {{interval}} min.',
      disabledInfo: 'Telegram notifications are disabled. Enable them when creating a project or update the configuration in the database.',
      noProjectsWarning: 'There are no projects with Telegram notifications enabled. Enable notifications when creating a project.'
    },
    settings: {
      title: 'Security settings',
      whitelistTitle: 'IP whitelist',
      whitelistDescription:
        'Whitelisted IPs bypass the global rate limit. Other addresses follow the configured security rules unless they are blacklisted.',
      blacklistTitle: 'IP blacklist',
      blacklistDescription:
        'Block suspicious addresses permanently or for a limited time. Entries are applied instantly to all API routes.',
      ipLabel: 'IP address',
      descriptionLabel: 'Description',
      add: '+',
      saving: 'Saving...',
      deleting: 'Deleting...',
      whitelistEmpty: 'Whitelist is empty',
      whitelistAdded: 'IP added to whitelist.',
      whitelistRemoved: 'IP removed from whitelist.',
      whitelistProtectedLabel: 'Protected entry',
      whitelistProtectedMessage: 'This IP is managed by the ADMIN_IP environment variable and cannot be removed.',
      remove: 'Delete',
      actions: 'Actions',
      addedAt: 'Added',
      invalidIp: 'Enter a valid IP address (IPv4 or IPv6).',
      blacklistReasonLabel: 'Reason',
      blacklistExpiresAtLabel: 'Blocked until',
      blacklistExpiresAtColumn: 'Blocked until',
      blacklistUpdatedAt: 'Updated',
      blacklistExpiresHelper: 'Leave empty for a permanent block.',
      blacklistAddButton: '+',
      blacklistEmpty: 'Blacklist is empty',
      blacklistPermanent: 'Permanent',
      blacklistEditDialogTitle: 'Edit blacklist entry',
      blacklistSaveChanges: 'Save changes',
      blacklistCreateSuccess: 'Blacklist entry created.',
      blacklistUpdateSuccess: 'Blacklist entry updated.',
      blacklistDeleteSuccess: 'Blacklist entry removed.',
      blacklistOperationError: 'Failed to process blacklist request.',
      loadError: 'Failed to load settings',
      rateLimitTitle: 'API rate limit',
      rateLimitDescription: 'Current limit: {{value}} requests per minute.',
      rateLimitLabel: 'Rate limit (requests per minute)',
      rateLimitHelper: 'Positive integers only. Default: 120 requests/min.',
      saveRateLimit: 'Update limit',
      resetRateLimit: 'Reset to default',
      rateLimitWarning:
        'Changing the rate limit may weaken security protections. Proceed only if you fully understand the impact.',
      rateLimitDialogTitle: 'Confirm rate limit change',
      rateLimitConfirm: 'Set the rate limit to {{value}} requests per minute?',
      rateLimitResetConfirm: 'Reset the rate limit to the default value (120 requests per minute)?',
      rateLimitDialogWarning: 'Incorrect values may expose the API to abuse or block integrations.',
      confirmRateLimit: 'Confirm',
      rateLimitUpdated: 'Rate limit updated.',
      rateLimitUpdateError: 'Failed to update rate limit.',
      systemTitle: 'System project Logger',
      systemDescription:
        'The system project stores internal events such as authentication errors, IP blocks and other service events.',
      loadSystemError: 'Failed to load system logs.',
      systemLogMeta: 'IP: {{ip}} · Service: {{service}}'
    },
    faq: {
      title: 'Help & FAQ',
      intro:
        'This section collects answers to frequent questions, explains how to work with each menu item and provides API examples.',
      helpSection: {
        title: 'How to work with the interface',
        dashboard:
          'Dashboard — shows aggregated statistics for all projects, log level distribution and the latest incidents for quick analysis.',
        projects:
          'Projects — manage logging projects, copy UUIDs, navigate to logs, ping services or edit/delete a project.',
        addProject:
          'Add project — opens the project wizard where you configure metadata, tags, access level and Telegram notifications.',
        logs:
          'Logs — filter logs by level, text, tags, user, IP, service and time range. Results can be exported or deleted by filter.',
        ping:
          'Ping monitoring — configure HTTP checks for project services, run manual checks and monitor the latest status.',
        telegram:
          'Telegram — review enabled recipients per project and verify notification status.',
        settings:
          'Settings — manage the IP whitelist and blacklist and review system events generated by the logger.',
        rateLimit:
          'Rate limit — default 120 requests per minute per IP. Increasing it may expose the API to abuse, decreasing it too much may block integrations.',
        faq:
          'Help & FAQ — the current page with documentation, API examples and environment variables.'
      },
      addProjectDetails: {
        title: 'Project creation form fields',
        name: 'Project name — display name in the UI and metadata of ingested logs.',
        description: 'Description — optional field that helps team members understand the purpose of the project.',
        logFormat:
          'Log format (JSON) — expected schema of incoming logs. Used for validation and for displaying the log structure.',
        defaultTags:
          'Default tags — predefined log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL) that are always available for filtering.',
        customTags:
          'Custom tags — additional labels for project-specific events. Enter comma separated values and add them to the list.',
        accessLevel:
          'Access level — controls who can send logs: global (any client with a token), whitelist (only approved IPs), Docker only (inside the internal network).',
        telegramNotify:
          'Telegram notifications — enable sending alerts via the configured bot and manage recipients/tags.',
        antiSpam:
          'Anti-spam interval — pause in minutes between repeated alerts for the same event.',
        recipients:
          'Recipients — list of Telegram chat IDs with optional tag filters to receive only relevant alerts.',
        debugMode:
          'Debug mode — disables Telegram notifications for the project but keeps log ingestion active.'
      },
      security: {
        title: 'Whitelist, blacklist & rate limits',
        overview:
          'Use the Security settings page to maintain trusted and blocked IP addresses. Changes apply instantly to API requests.',
        whitelistUsage:
          'Whitelist — approve IPv4 or IPv6 addresses to bypass the global rate limit. Standard security checks still apply to all other clients unless the IP is blacklisted.',
        blacklistUsage:
          'Blacklist — provide an IP, reason and optional expiry. Leave “Blocked until” empty for a permanent block or set a date to automatically unblock.',
        accessLevels:
          'Access levels: Global projects obey the configured rate limit, Whitelist and Docker-only projects bypass throttling. Adjust the limit under Security settings.',
        maintenance:
          'Review both lists regularly and document the reason for each record to keep integrations transparent and secure.'
      },
      apiExamples: {
        title: 'API usage examples',
        description:
          'Send logs to the collector using the REST endpoint. Below are ready-to-use snippets for popular languages.',
        ingestLogPython: 'Send log (Python)',
        ingestLogTypeScript: 'Send log (TypeScript)',
        ingestLogGo: 'Send log (Go)',
        ingestLogBash: 'Send log (Bash)'
      },
      environment: {
        title: 'Environment variables',
        description: 'The following variables are used by the application:',
        apiUrl: '`VITE_API_URL` — default API base URL for the frontend. Can be overridden on the sign-in page.',
        loggerPageUrl: '`LOGGER_PAGE_URL` — optional link to project documentation displayed in the sidebar.',
        loggerVersion: '`LOGGER_VERSION` — version label shown in the sidebar.',
        botApiKey: '`BOT_API_KEY` — backend environment variable required for Telegram notifications.',
        jwtSecret: '`JWT_SECRET` — backend secret for issuing authentication tokens.',
        mongoUri: '`MONGO_URL` — connection string for the MongoDB database.'
      }
    }
  },
  ru: {
    common: {
      projectName: 'Simple Logger',
      loading: 'Загрузка данных...',
      saving: 'Сохранение...',
      create: 'Создать',
      add: 'Добавить',
      delete: 'Удалить',
      edit: 'Изменить',
      cancel: 'Отмена',
      close: 'Закрыть',
      confirm: 'Подтвердить',
      retry: 'Повторить',
      error: 'Ошибка',
      success: 'Успех',
      filters: 'Фильтры',
      hide: 'Скрыть',
      show: 'Показать',
      apply: 'Применить',
      clear: 'Очистить фильтр',
      export: 'Экспорт',
      notAvailable: '—',
      minutesShort: 'мин',
      yes: 'Да',
      no: 'Нет',
      off: 'Отключено',
      on: 'Включено',
      copy: 'Копировать',
      uuid: 'UUID',
      telegram: 'Telegram',
      debug: 'Debug',
      showMoreFilters: 'Показать дополнительные фильтры',
      hideFilters: 'Скрыть дополнительные фильтры',
      empty: 'Не указано',
      applyFilters: 'Применить фильтры',
      exportCsv: 'Экспорт в CSV',
      deleteByFilter: 'Удалить по фильтру',
      deleteInProgress: 'Очистка...',
      loadingLogs: 'Загрузка логов...',
      loadingProject: 'Загрузка проекта...',
      loadingSystemLogs: 'Загрузка системных логов...',
      removing: 'Удаление...',
      unexpectedError: 'Произошла непредвиденная ошибка. Повторите попытку.',
      checking: 'Проверка...',
      savingChanges: 'Сохранение изменений...',
      creatingProject: 'Создание проекта...',
      savingWhitelist: 'Сохранение...',
      refresh: 'Обновить'
    },
    auth: {
      title: 'Авторизация Logger',
      description:
        'Введите учетные данные администратора. При пяти неудачных попытках IP блокируется на 1 час.',
      username: 'Логин',
      password: 'Пароль',
      submit: 'Войти',
      submitting: 'Вход...',
      blocked: 'IP временно заблокирован.',
      failed: 'Не удалось выполнить вход',
      themeLight: 'Включить светлую тему',
      themeDark: 'Включить тёмную тему',
      languageToggle: 'Переключить язык',
      logoAlt: 'Логотип Simple Logger',
      apiUrlLabel: 'API URL',
      apiUrlPlaceholder: 'https://example.com/api',
      apiUrlHelp: 'Укажите базовый адрес API, с которым хотите работать.'
    },
    navigation: {
      dashboard: 'Дашборд',
      projects: 'Проекты',
      logs: 'Просмотр логов',
      ping: 'Ping-мониторинг',
      addProject: 'Добавить проект',
      telegram: 'Telegram',
      settings: 'Настройки',
      faq: 'Помощь и FAQ',
      language: 'Язык',
      collapse: 'Свернуть меню',
      expand: 'Развернуть меню',
      toggleThemeLight: 'Включить светлую тему',
      toggleThemeDark: 'Включить тёмную тему',
      logout: 'Выйти',
      appBarTitle: 'Панель управления',
      versionLabel: 'Версия {{version}}',
      openMenu: 'Открыть меню навигации',
      showControls: 'Открыть панель управления',
      hideControls: 'Скрыть панель управления',
      closeControls: 'Скрыть панель управления'
    },
    dashboard: {
      title: 'Общая сводка',
      totalProjects: 'Всего проектов',
      totalProjectsDescription: 'Управление логами и уведомлениями',
      pingMonitoring: 'Мониторинг ping-сервисов',
      pingMonitoringDescription: 'Активные проверки доступности',
      telegramEnabled: 'Telegram-уведомления',
      telegramEnabledDescription: 'Проектов с активными оповещениями',
      logDistribution: 'Распределение логов по уровням',
      apiUrlLabel: 'Базовый адрес API',
      apiUrlDescription: '',
      apiUrlNotConfigured: 'Не задан',
      rateLimitInfo: 'Rate limit: {{value}} запросов/мин',
      rateLimitUnknown: 'Информация о rate limit недоступна.',
      incidents: 'Последние инциденты',
      noIncidents: 'Критических инцидентов не зафиксировано.',
      incidentMeta: 'IP: {{ip}} · Сервис: {{service}} · Пользователь: {{user}}',
      activeProjects: 'Активные проекты',
      createdAt: 'UUID: {{uuid}} · Создан: {{date}} · Доступ: {{access}}',
      loadError: 'Не удалось загрузить данные дашборда',
      logsDatasetLabel: 'Количество логов'
    },
    projects: {
      title: 'Проекты',
      searchPlaceholder: 'Поиск по названию, описанию или UUID',
      addProject: 'Добавить проект',
      noProjects: 'Нет проектов',
      menu: 'Меню',
      totalRows: '{{visible}} из {{total}}',
      telegramEnabled: 'Включено',
      telegramDisabled: 'Отключено',
      telegramRecipients: 'Получателей: {{count}}',
      descriptionMissing: 'Описание не задано',
      actions: 'Действия',
      logs: 'Логи',
      edit: 'Изменить',
      delete: 'Удалить',
      ping: 'Ping',
      copyUuid: 'Скопировать UUID',
      deleteError: 'Не удалось удалить проект',
      loadError: 'Не удалось загрузить проекты',
      columns: {
        name: 'Название',
        uuid: 'UUID',
        telegram: 'Telegram',
        access: 'Доступ',
        createdAt: 'Создан',
        actions: 'Действия'
      },
      rateLimit: 'Rate limit: {{value}} запросов/мин',
      rateLimitUnlimited: 'Rate limit: без ограничений',
      rateLimitUnknown: 'Rate limit: неизвестно',
      deleteDialogTitle: 'Удалить проект',
      deleteDialogDescription:
        'Это действие удалит проект "{{name}}" и все связанные логи. Для подтверждения введите полное название проекта.',
      deleteDialogLabel: 'Название проекта',
      deleteDialogCancel: 'Отмена',
      deleteDialogConfirm: 'Удалить',
      deleteDialogConfirming: 'Удаление...',
      deleteDialogError: 'Не удалось удалить проект',
      projectDeletionWarning: 'Для подтверждения удаления введите название проекта в точности.'
    },
    projectForm: {
      name: 'Название проекта',
      description: 'Описание',
      logFormat: 'Лог-формат (JSON)',
      accessLevel: 'Уровень доступа',
      accessGlobal: 'Глобальный',
      accessWhitelist: 'Белый список',
      accessDocker: 'Только Docker',
      debugMode: 'Режим отладки (без Telegram уведомлений)',
      tagsTitle: 'Теги',
      customTags: 'Пользовательские теги',
      newTag: 'Новый тег',
      addTag: 'Добавить тег',
      noCustomTags: 'Дополнительные теги не заданы',
      telegramNotifications: 'Отправлять уведомления в Telegram',
      antiSpam: 'Анти-спам интервал (мин)',
      recipients: 'Получатели уведомлений',
      chatId: 'Chat ID',
      tagsPlaceholder: 'Теги (через запятую)',
      addRecipient: 'Добавить получателя',
      noRecipients: 'Получатели не добавлены',
      recipientTags: 'Теги: {{tags}}',
      recipientAllTags: 'Получает все события',
      validationError: 'Лог-формат должен быть валидным JSON.',
      cancel: 'Отмена',
      submit: 'Сохранить',
      submitting: 'Сохранение...',
      telegramTagsHelper: 'Например: PING_DOWN,CRITICAL',
      telegramTagsLabel: 'Telegram теги (через запятую)',
      recipientsCount: 'Получатели ({{count}})',
      antiSpamHint: 'Анти-спам интервал: {{interval}} мин.',
      rateLimitGlobal: 'Rate limit: {{value}} запросов/мин (управляется в разделе "Настройки безопасности").',
      rateLimitGlobalUnknown: 'Rate limit определяется глобальной настройкой безопасности (по умолчанию 120 запросов/мин).',
      rateLimitBypass: 'Проекты с доступом "Белый список" и "Только Docker" не попадают под глобальный rate limit.',
      maxLogEntriesLabel: 'Максимум логов в хранилище',
      maxLogEntriesHelper: 'Укажите 0, чтобы хранить все логи без ограничений.',
      maxLogEntriesLocked: 'Logger Core всегда сохраняет все системные логи.',
      telegramDeepLinksTitle: 'Команды для Telegram',
      telegramSubscribeLink: 'Команда подписки (ADD)',
      telegramUnsubscribeLink: 'Команда отписки (DELETE)',
      telegramCopyLink: 'Скопировать команду',
      telegramLinkCopiedSubscribe: 'Команда подписки скопирована.',
      telegramLinkCopiedUnsubscribe: 'Команда отписки скопирована.',
      telegramLinkCopyError: 'Не удалось скопировать команду. Повторите попытку.',
      telegramLinkUnavailable: 'Не удалось подготовить команду. Проверьте, что бот активен.',
      telegramLinkUnavailableShort: 'Недоступно',
      telegramLinkSaveNotice: 'Сохраните проект, чтобы команды сформировались автоматически.',
      telegramLinkBotInactive: 'Телеграм-бот не активен или ссылка неизвестна.'
    },
    addProject: {
      title: 'Добавление проекта',
      submit: 'Создать проект',
      cancel: 'Отмена',
      loading: 'Создание проекта...',
      error: 'Не удалось создать проект'
    },
    editProject: {
      title: 'Редактирование проекта',
      submit: 'Сохранить изменения',
      loading: 'Сохранение изменений...',
      delete: 'Удалить проект',
      loadError: 'Проект не найден',
      missingUuid: 'Не указан UUID проекта',
      deleting: 'Удаление...',
      deleteError: 'Не удалось удалить проект',
      loadInProgress: 'Загрузка проекта...',
      error: 'Не удалось обновить проект'
    },
    logs: {
      title: 'Просмотр логов',
      project: 'Проект',
      projectUuid: 'UUID проекта',
      level: 'Уровень',
      logId: 'ID записи',
      allLevels: 'Все',
      tag: 'Тег',
      text: 'Текст',
      user: 'Пользователь',
      ip: 'IP',
      service: 'Сервис',
      startDate: 'Начало',
      endDate: 'Окончание',
      showFilters: 'Показать дополнительные фильтры',
      hideFilters: 'Скрыть дополнительные фильтры',
      apply: 'Применить фильтры',
      clear: 'Очистить фильтр',
      export: 'Экспорт в CSV',
      deleteByFilter: 'Удалить по фильтру',
      deleting: 'Очистка...',
      loadError: 'Не удалось загрузить проекты',
      logsLoadError: 'Не удалось загрузить логи',
      filtersApplied: 'Найдено логов: {{count}}. Проект: {{project}}',
      noLogs: 'Логи не найдены по заданным фильтрам',
      filtersToggle: 'Дополнительные фильтры',
      deleteConfirm: 'Удалить по фильтру',
      detailsToggleLabel: 'Открывать подробности по клику',
      detailsDialogTitle: 'Подробности лога',
      detailsRaw: 'Исходная запись',
      levelOptions: {
        debug: 'DEBUG',
        info: 'INFO',
        warning: 'WARNING',
        error: 'ERROR',
        critical: 'CRITICAL',
        all: 'Все'
      },
      actionsHeader: 'Действия',
      metadata: {
        ip: 'IP: {{value}}',
        clientIp: 'IP клиента: {{value}}',
        service: 'Сервис: {{value}}',
        user: 'Пользователь: {{value}}'
      },
      metadataHeader: 'Метаданные',
      messageHeader: 'Сообщение',
      timestampHeader: 'Время',
      tagsLabel: 'Теги: {{tags}}',
      copyLog: 'Скопировать лог',
      deleteLog: 'Удалить лог'
    },
    ping: {
      title: 'Ping-мониторинг',
      project: 'Проект',
      addService: 'Добавить сервис',
      trigger: 'Запустить проверку',
      triggering: 'Проверка...',
      newService: 'Новый ping-сервис',
      name: 'Название',
      url: 'URL',
      interval: 'Интервал (сек)',
      telegramTags: 'Telegram теги (через запятую)',
      telegramTagsHint: 'Например: PING_DOWN,CRITICAL',
      cancel: 'Отмена',
      save: 'Добавить',
      update: 'Сохранить изменения',
      saving: 'Сохранение...',
      intervalHint: 'Минимальный интервал: {{min}} сек.',
      noServices: 'Сервисы не настроены',
      loadProjectsError: 'Не удалось загрузить список проектов',
      loadServicesError: 'Не удалось загрузить ping-сервисы',
      detailsTitle: 'Подробности сервиса',
      detailsUrl: 'URL',
      detailsInterval: 'Интервал: {{value}} секунд',
      detailsTags: 'Теги',
      detailsNoTags: 'Теги не заданы',
      detailsStatus: 'Статус',
      detailsLastCheck: 'Последняя проверка',
      detailsNotChecked: 'Проверки ещё не выполнялись',
      detailsCreated: 'Создан',
      detailsUpdated: 'Обновлён',
      status: {
        ok: 'OK',
        degraded: 'Проблемы',
        down: 'Недоступен',
        unknown: '—'
      },
      intervalHeader: 'Интервал (сек)',
      statusHeader: 'Статус',
      lastCheckHeader: 'Последняя проверка',
      telegramTagsHeader: 'Теги Telegram',
      actionsHeader: 'Действия',
      lastCheckedRelative: '{{value}}',
      noTags: 'Нет тегов',
      checkAction: 'Проверить',
      projectCheckTriggered: 'Запущена проверка всех сервисов.',
      serviceCheckTriggered: 'Запущена проверка сервиса.',
      triggerError: 'Не удалось запустить проверку.',
      serviceCreated: 'Ping-сервис добавлен.',
      saveError: 'Не удалось сохранить ping-сервис.',
      serviceUpdated: 'Ping-сервис обновлён.',
      updateError: 'Не удалось обновить ping-сервис.',
      serviceDeleted: 'Ping-сервис удалён.',
      deleteError: 'Не удалось удалить ping-сервис.',
      editService: 'Изменить',
      deleteService: 'Удалить',
      deleting: 'Удаление...',
      deleteDialogTitle: 'Удаление ping-сервиса',
      deleteDialogDescription: 'Удалить ping-сервис «{{name}}»? Проверки больше выполняться не будут.'
    },
    telegram: {
      title: 'Telegram-интеграция',
      info:
        'Для отправки уведомлений необходимо указать токен бота в переменной окружения BOT_API_KEY на стороне backend. Управление получателями производится для каждого проекта отдельно.',
      connected: 'Telegram подключен.',
      openChat: 'Открыть чат в Telegram',
      tokenProvidedNoBot: 'Токен бота задан, но бот не запущен. Проверьте логи backend.',
      statusLoadError: 'Не удалось получить статус Telegram-бота.',
      loadError: 'Не удалось загрузить проекты',
      notificationsEnabled: 'Уведомления включены',
      notificationsDisabled: 'Уведомления выключены',
      recipients: 'Получатели ({{count}})',
      noRecipients: 'Получатели не настроены. Добавьте их при создании проекта или обновите настройки backend.',
      receivesAll: 'Получает все события',
      antiSpam: 'Анти-спам интервал: {{interval}} мин.',
      disabledInfo:
        'Telegram-уведомления отключены. Включите их при создании проекта или обновите конфигурацию в базе данных.',
      noProjectsWarning:
        'Нет проектов с активными telegram-уведомлениями. Включите уведомления при создании проекта.'
    },
    settings: {
      title: 'Настройки безопасности',
      whitelistTitle: 'Белый список IP',
      whitelistDescription:
        'IP-адреса из белого списка обходят глобальное ограничение скорости. Остальные адреса работают по стандартным правилам безопасности, если только не попали в чёрный список.',
      blacklistTitle: 'Чёрный список IP',
      blacklistDescription:
        'Блокируйте подозрительные адреса навсегда или на ограниченное время. Правила применяются мгновенно ко всем маршрутам API.',
      ipLabel: 'IP адрес',
      descriptionLabel: 'Описание',
      add: '+',
      saving: 'Сохранение...',
      deleting: 'Удаление...',
      whitelistEmpty: 'Белый список пуст',
      whitelistAdded: 'IP добавлен в белый список.',
      whitelistRemoved: 'IP удалён из белого списка.',
      whitelistProtectedLabel: 'Защищённая запись',
      whitelistProtectedMessage: 'Этот IP задан переменной окружения ADMIN_IP и не может быть удалён.',
      remove: 'Удалить',
      actions: 'Действия',
      addedAt: 'Добавлен',
      invalidIp: 'Введите корректный IP-адрес (IPv4 или IPv6).',
      blacklistReasonLabel: 'Причина',
      blacklistExpiresAtLabel: 'Блокировка до',
      blacklistExpiresAtColumn: 'Блокировка до',
      blacklistUpdatedAt: 'Обновлено',
      blacklistExpiresHelper: 'Оставьте пустым для бессрочной блокировки.',
      blacklistAddButton: '+',
      blacklistEmpty: 'Чёрный список пуст',
      blacklistPermanent: 'Бессрочно',
      blacklistEditDialogTitle: 'Редактирование блокировки',
      blacklistSaveChanges: 'Сохранить изменения',
      blacklistCreateSuccess: 'Блокировка добавлена.',
      blacklistUpdateSuccess: 'Блокировка обновлена.',
      blacklistDeleteSuccess: 'Блокировка удалена.',
      blacklistOperationError: 'Не удалось выполнить операцию с чёрным списком.',
      loadError: 'Не удалось загрузить настройки',
      rateLimitTitle: 'Ограничение скорости API',
      rateLimitDescription: 'Текущее значение: {{value}} запросов в минуту.',
      rateLimitLabel: 'Лимит запросов (в минуту)',
      rateLimitHelper: 'Допустимы только положительные целые числа. Значение по умолчанию — 120.',
      saveRateLimit: 'Обновить лимит',
      resetRateLimit: 'Сбросить по умолчанию',
      rateLimitWarning:
        'Изменение лимита может ослабить защиту от атак. Действуйте, только если понимаете последствия.',
      rateLimitDialogTitle: 'Подтверждение изменения rate limit',
      rateLimitConfirm: 'Установить лимит {{value}} запросов в минуту?',
      rateLimitResetConfirm: 'Сбросить лимит до значения по умолчанию (120 запросов в минуту)?',
      rateLimitDialogWarning: 'Неверные значения могут открыть API для злоупотреблений или заблокировать интеграции.',
      confirmRateLimit: 'Подтвердить',
      rateLimitUpdated: 'Rate limit обновлён.',
      rateLimitUpdateError: 'Не удалось обновить rate limit.',
      systemTitle: 'Системный проект Logger',
      systemDescription:
        'Системный проект хранит внутренние события: ошибки авторизации, блокировки IP и другие служебные события.',
      loadSystemError: 'Не удалось загрузить системные логи.',
      systemLogMeta: 'IP: {{ip}} · Сервис: {{service}}'
    },
    faq: {
      title: 'Помощь и FAQ',
      intro:
        'Здесь собраны ответы на частые вопросы, описание работы с меню и примеры использования API.',
      helpSection: {
        title: 'Как работать с интерфейсом',
        dashboard:
          'Дашборд — показывает агрегированную статистику по проектам, распределение уровней логов и последние инциденты для быстрого анализа.',
        projects:
          'Проекты — управляйте проектами логирования, копируйте UUID, переходите к логам, ping-сервисам или редактируйте/удаляйте проект.',
        addProject:
          'Добавление проекта — открывает мастер настройки, где задаются метаданные, теги, уровень доступа и Telegram-уведомления.',
        logs:
          'Просмотр логов — фильтрация по уровню, тексту, тегам, пользователю, IP, сервису и диапазону времени. Результаты можно экспортировать или очистить по фильтру.',
        ping:
          'Ping-мониторинг — настройка HTTP-проверок сервисов проекта, ручной запуск и мониторинг последнего статуса.',
        telegram:
          'Telegram — просмотр подключенных получателей по каждому проекту и проверка статуса уведомлений.',
        settings:
          'Настройки — управление белым и чёрным списками IP и просмотр системных событий, которые генерирует логгер.',
        rateLimit:
          'Rate limit — по умолчанию 120 запросов в минуту для одного IP. Повышение увеличивает риск атак, слишком низкое значение может блокировать интеграции.',
        faq:
          'Помощь и FAQ — текущая страница с документацией, примерами API и описанием переменных окружения.'
      },
      addProjectDetails: {
        title: 'Поля формы добавления проекта',
        name: 'Название проекта — отображается в интерфейсе и используется в метаданных поступающих логов.',
        description: 'Описание — необязательное поле, помогает коллегам понять назначение проекта.',
        logFormat:
          'Лог-формат (JSON) — ожидаемая схема входящих логов. Используется для валидации и отображения структуры.',
        defaultTags:
          'Стандартные теги — предустановленные уровни логов (DEBUG, INFO, WARNING, ERROR, CRITICAL), доступные для фильтрации.',
        customTags:
          'Пользовательские теги — дополнительные метки для событий проекта. Вводите значения через запятую и добавляйте в список.',
        accessLevel:
          'Уровень доступа — определяет кто может отправлять логи: global (любой клиент с токеном), whitelist (только разрешенные IP), docker (внутренняя сеть).',
        telegramNotify:
          'Telegram-уведомления — включают отправку оповещений через настроенного бота и позволяют управлять получателями/тегами.',
        antiSpam:
          'Анти-спам интервал — пауза в минутах между повторными уведомлениями об одном и том же событии.',
        recipients:
          'Получатели — список Telegram chat ID с необязательными фильтрами по тегам, чтобы получать только нужные уведомления.',
        debugMode:
          'Режим отладки — отключает Telegram-уведомления, но позволяет продолжать сбор логов.'
      },
      security: {
        title: 'Белый/чёрный списки и rate limit',
        overview:
          'Раздел «Настройки безопасности» позволяет вести белый и чёрный списки. Изменения применяются ко всем запросам API мгновенно.',
        whitelistUsage:
          'Белый список — добавляйте IPv4/IPv6, чтобы освободить адреса от глобального rate limit. Для остальных клиентов продолжают действовать стандартные проверки, если IP не заблокирован.',
        blacklistUsage:
          'Чёрный список — задайте IP, причину и при желании дату окончания. Пустое поле «Блокировка до» делает блокировку бессрочной.',
        accessLevels:
          'Уровни доступа: проекты в режиме «Глобальный» ограничены текущим rate limit, режимы «Белый список» и «Только Docker» обходят ограничение. Лимит настраивается в разделе безопасности.',
        maintenance:
          'Регулярно пересматривайте оба списка и фиксируйте причины блокировок, чтобы сохранять прозрачность и безопасность интеграций.'
      },
      apiExamples: {
        title: 'Примеры работы с API',
        description:
          'Отправляйте логи в коллектор через REST-эндпоинт. Ниже представлены готовые сниппеты для популярных языков.',
        ingestLogPython: 'Отправка лога (Python)',
        ingestLogTypeScript: 'Отправка лога (TypeScript)',
        ingestLogGo: 'Отправка лога (Go)',
        ingestLogBash: 'Отправка лога (Bash)'
      },
      environment: {
        title: 'Переменные окружения',
        description: 'Для работы приложения используются следующие переменные:',
        apiUrl: '`VITE_API_URL` — базовый URL API по умолчанию для фронтенда. Можно изменить на странице входа.',
        loggerPageUrl: '`LOGGER_PAGE_URL` — необязательная ссылка на документацию проекта, отображается в боковом меню.',
        loggerVersion: '`LOGGER_VERSION` — версия приложения, выводится в боковой панели.',
        botApiKey: '`BOT_API_KEY` — переменная backend для Telegram-уведомлений.',
        jwtSecret: '`JWT_SECRET` — секрет backend для выдачи токенов авторизации.',
        mongoUri: '`MONGO_URL` — строка подключения к базе данных MongoDB.'
      }
    }
  }
};
