openapi: 3.1.0
info:
  title: Simple Logger API
  version: 1.0.0
  description: |
    Спецификация REST API централизованного сервиса логирования Simple Logger.
    Все административные эндпоинты требуют авторизационного токена администратора,
    передаваемого в заголовке `Authorization: Bearer <token>`.
servers:
  - url: http://localhost:3000
    description: Локальный сервер API
security:
  - BearerAuth: []
tags:
  - name: Health
    description: Проверки доступности сервиса
  - name: Authentication
    description: Авторизация администратора
  - name: Projects
    description: Управление проектами и их настройками
  - name: Logs
    description: Приём и управление логами
  - name: PingServices
    description: Мониторинг внешних ping-сервисов
  - name: Settings
    description: Системные настройки и белый список IP
paths:
  /health:
    get:
      tags: [Health]
      summary: Проверка состояния API
      description: Возвращает состояние сервиса и может использоваться для мониторинга.
      security: []
      responses:
        '200':
          description: Сервис работает.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /api/auth/login:
    post:
      tags: [Authentication]
      summary: Авторизация администратора
      description: Выдаёт сессионный токен администратора по паре логин/пароль.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Авторизация прошла успешно.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учётные данные.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '423':
          description: IP временно заблокирован из-за частых неудачных попыток входа.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/projects:
    post:
      tags: [Projects]
      summary: Создание проекта
      description: Создаёт новый проект логирования.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '201':
          description: Проект создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Некорректные параметры проекта.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    get:
      tags: [Projects]
      summary: Список проектов
      description: Возвращает проекты, отсортированные по времени создания (от новых к старым).
      responses:
        '200':
          description: Проекты успешно получены.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/projects/{uuid}:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
    get:
      tags: [Projects]
      summary: Получение проекта
      description: Возвращает проект по его UUID.
      responses:
        '200':
          description: Найденный проект.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Запрещено записывать логи в системный проект.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Превышен лимит сохранённых логов для проекта.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Projects]
      summary: Обновление проекта
      description: Изменяет параметры проекта. UUID изменять нельзя.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectInput'
      responses:
        '200':
          description: Проект обновлён.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Некорректные параметры или попытка изменить UUID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Projects]
      summary: Удаление проекта
      description: Удаляет проект, а также связанные логи и ping-сервисы. Системный проект `logger-system` удалить нельзя.
      responses:
        '200':
          description: Проект удалён.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Проект удален
                  deletedLogs:
                    type: integer
                    minimum: 0
                  deletedPingServices:
                    type: integer
                    minimum: 0
        '400':
          description: Нельзя удалить системный проект.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/projects/{uuid}/logs:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
      - $ref: '#/components/parameters/LogLevelQueryParam'
      - $ref: '#/components/parameters/LogTextQueryParam'
      - $ref: '#/components/parameters/LogTagQueryParam'
      - $ref: '#/components/parameters/LogUserQueryParam'
      - $ref: '#/components/parameters/LogIpQueryParam'
      - $ref: '#/components/parameters/LogServiceQueryParam'
      - $ref: '#/components/parameters/LogStartDateQueryParam'
      - $ref: '#/components/parameters/LogEndDateQueryParam'
      - $ref: '#/components/parameters/LogIdQueryParam'
    get:
      tags: [Projects, Logs]
      summary: Логи проекта
      description: Возвращает до 5000 логов выбранного проекта с учётом фильтров.
      responses:
        '200':
          description: Список логов проекта.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLogResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/projects/{uuid}/ping-services:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
    get:
      tags: [Projects, PingServices]
      summary: Список ping-сервисов
      description: Возвращает ping-сервисы проекта.
      responses:
        '200':
          description: Ping-сервисы получены.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PingService'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: [Projects, PingServices]
      summary: Добавление ping-сервиса
      description: Регистрирует новый ping-сервис и выполняет первую проверку.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingServiceInput'
      responses:
        '201':
          description: Ping-сервис создан.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingService'
        '400':
          description: Некорректные параметры ping-сервиса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/projects/{uuid}/ping-services/{serviceId}:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
      - name: serviceId
        in: path
        required: true
        description: Идентификатор ping-сервиса.
        schema:
          type: string
          example: 6650f47f9d3ab00015a81234
    put:
      tags: [Projects, PingServices]
      summary: Обновление ping-сервиса
      description: Изменяет параметры существующего ping-сервиса проекта и запускает проверку.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingServiceUpdateInput'
      responses:
        '200':
          description: Ping-сервис обновлён.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingService'
        '400':
          description: Некорректные параметры ping-сервиса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Ping-сервис или проект не найдены.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Projects, PingServices]
      summary: Удаление ping-сервиса
      description: Удаляет ping-сервис из проекта.
      responses:
        '200':
          description: Ping-сервис удалён.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePingServiceResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Ping-сервис или проект не найдены.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/projects/{uuid}/ping-services/check:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
    post:
      tags: [Projects, PingServices]
      summary: Принудительная проверка ping-сервисов
      description: Выполняет немедленную проверку всех ping-сервисов проекта и возвращает актуальные данные.
      responses:
        '200':
          description: Результаты проверки.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PingService'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/projects/{uuid}/telegram:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
    get:
      tags: [Projects]
      summary: Телеграм-интеграция проекта
      description: Возвращает ссылки для подписки, состояние бота и текущие настройки уведомлений.
      responses:
        '200':
          description: Информация о Телеграм-интеграции проекта.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTelegramInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/projects/{uuid}/telegram/recipients/{chatId}:
    parameters:
      - $ref: '#/components/parameters/ProjectUuidPathParam'
      - $ref: '#/components/parameters/TelegramChatIdPathParam'
    delete:
      tags: [Projects]
      summary: Удалить подписчика Telegram
      description: Отписывает выбранного получателя и отправляет ему уведомление об отключении рассылки.
      responses:
        '200':
          description: Подписчик удалён.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveTelegramRecipientResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект или подписчик не найдены.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/logs:
    get:
      tags: [Logs]
      summary: Фильтрация логов
      description: Возвращает логи проекта по переданным фильтрам.
      parameters:
        - $ref: '#/components/parameters/LogProjectUuidQueryParam'
        - $ref: '#/components/parameters/LogLevelQueryParam'
        - $ref: '#/components/parameters/LogTextQueryParam'
        - $ref: '#/components/parameters/LogTagQueryParam'
        - $ref: '#/components/parameters/LogUserQueryParam'
        - $ref: '#/components/parameters/LogIpQueryParam'
        - $ref: '#/components/parameters/LogServiceQueryParam'
        - $ref: '#/components/parameters/LogStartDateQueryParam'
        - $ref: '#/components/parameters/LogEndDateQueryParam'
        - $ref: '#/components/parameters/LogIdQueryParam'
      responses:
        '200':
          description: Результат фильтрации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectLogResponse'
        '400':
          description: Не указан UUID проекта.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags: [Logs]
      summary: Приём лога
      description: Принимает и сохраняет лог от клиента.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogIngestRequest'
      responses:
        '201':
          description: Лог сохранён.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogIngestResponse'
        '400':
          description: Тело запроса не соответствует схеме.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/logs/{uuid}:
    delete:
      tags: [Logs]
      summary: Удаление логов проекта
      description: Удаляет логи проекта, соответствующие фильтру.
      parameters:
        - $ref: '#/components/parameters/ProjectUuidPathParam'
        - $ref: '#/components/parameters/LogLevelQueryParam'
        - $ref: '#/components/parameters/LogTextQueryParam'
        - $ref: '#/components/parameters/LogTagQueryParam'
        - $ref: '#/components/parameters/LogUserQueryParam'
        - $ref: '#/components/parameters/LogIpQueryParam'
        - $ref: '#/components/parameters/LogServiceQueryParam'
        - $ref: '#/components/parameters/LogStartDateQueryParam'
        - $ref: '#/components/parameters/LogEndDateQueryParam'
        - $ref: '#/components/parameters/LogIdQueryParam'
      responses:
        '200':
          description: Количество удалённых логов.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
                    minimum: 0
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Проект не найден.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/settings/whitelist:
    get:
      tags: [Settings]
      summary: Список IP в белом списке
      description: Возвращает все записи белого списка, включая описание, дату создания и флаг `isProtected` для записей, добавленных через переменную `ADMIN_IP`.
      responses:
        '200':
          description: Текущий белый список.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WhitelistEntry'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: [Settings]
      summary: Добавление IP в белый список
      description: Создаёт или обновляет запись белого списка.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WhitelistPayload'
      responses:
        '201':
          description: Запись белого списка сохранена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WhitelistEntry'
        '400':
          description: Некорректные параметры записи.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/settings/whitelist/{ip}:
    parameters:
      - name: ip
        in: path
        required: true
        description: IP адрес, который нужно удалить из белого списка.
        schema:
          type: string
          example: 192.168.0.10
    delete:
      tags: [Settings]
      summary: Удаление IP из белого списка
      description: Удаляет запись по IP адресу. При попытке удалить IP, заданный переменной `ADMIN_IP`, возвращает `403 Forbidden`.
      responses:
        '200':
          description: IP удалён из списка.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          description: IP защищён переменной `ADMIN_IP`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Запись не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/settings/blacklist:
    get:
      tags: [Settings]
      summary: Список IP в чёрном списке
      description: Возвращает все активные и запланированные блокировки IP.
      responses:
        '200':
          description: Текущий чёрный список.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlacklistEntry'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    post:
      tags: [Settings]
      summary: Добавление IP в чёрный список
      description: Создаёт новую блокировку IP с указанием причины и срока действия.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlacklistPayload'
      responses:
        '201':
          description: Блокировка создана.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlacklistEntry'
        '400':
          description: Некорректные параметры блокировки.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '409':
          description: Блокировка для указанного IP уже существует.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/settings/blacklist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Идентификатор блокировки IP.
        schema:
          type: string
          example: 6650f669d4b5c00017da5678
    put:
      tags: [Settings]
      summary: Обновление блокировки IP
      description: Позволяет изменить IP, причину или срок действия блокировки.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlacklistUpdatePayload'
      responses:
        '200':
          description: Блокировка обновлена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlacklistEntry'
        '400':
          description: Некорректные параметры обновления.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Блокировка не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Попытка изменить IP на уже заблокированный адрес.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Settings]
      summary: Удаление блокировки IP
      description: Снимает блокировку и удаляет запись из чёрного списка.
      responses:
        '200':
          description: Блокировка удалена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBlacklistResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          description: Блокировка не найдена.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/settings/rate-limit:
    get:
      tags: [Settings]
      summary: Получение значения rate limit
      description: Возвращает текущее ограничение количества запросов в минуту для API.
      responses:
        '200':
          description: Текущее значение rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitSettings'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
    put:
      tags: [Settings]
      summary: Обновление значения rate limit
      description: Устанавливает новое ограничение количества запросов в минуту для API.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitSettings'
      responses:
        '200':
          description: Rate limit обновлён.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitSettings'
        '400':
          description: Некорректное значение rate limit.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/settings/telegram-status:
    get:
      tags: [Settings]
      summary: Проверка статуса Telegram-бота
      description: Возвращает информацию о том, передан ли ключ `BOT_API_KEY` и активен ли бот.
      responses:
        '200':
          description: Текущее состояние интеграции с Telegram.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/settings/telegram-url:
    get:
      tags: [Settings]
      summary: Получение публичного URL Telegram-бота
      description: >-
        Возвращает ссылку на Telegram-бота, если она задана в `BOT_URL` или получена из Telegram Bot API.
        В ответе также указывается источник данных и активен ли бот.
      responses:
        '200':
          description: Публичная ссылка или причина её отсутствия.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelegramBotUrlInfo'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: token
      description: Сессионный токен администратора.
  responses:
    UnauthorizedResponse:
      description: Отсутствует или недействительный токен администратора.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenResponse:
      description: Доступ запрещён белым списком IP.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    ProjectUuidPathParam:
      name: uuid
      in: path
      required: true
      description: UUID проекта.
      schema:
        type: string
        format: uuid
    TelegramChatIdPathParam:
      name: chatId
      in: path
      required: true
      description: Идентификатор подписчика Telegram.
      schema:
        type: string
        example: '123456789'
    LogProjectUuidQueryParam:
      name: uuid
      in: query
      required: true
      description: UUID проекта, для которого выполняется запрос.
      schema:
        type: string
        format: uuid
    LogLevelQueryParam:
      name: level
      in: query
      required: false
      description: Фильтр по уровню логирования.
      schema:
        type: string
        example: ERROR
    LogTextQueryParam:
      name: text
      in: query
      required: false
      description: Поиск по тексту сообщения (регистронезависимый).
      schema:
        type: string
    LogTagQueryParam:
      name: tag
      in: query
      required: false
      description: Фильтр по тегу.
      schema:
        type: string
    LogUserQueryParam:
      name: user
      in: query
      required: false
      description: Фильтр по идентификатору пользователя.
      schema:
        type: string
    LogIpQueryParam:
      name: ip
      in: query
      required: false
      description: Фильтр по IP адресу.
      schema:
        type: string
    LogServiceQueryParam:
      name: service
      in: query
      required: false
      description: Фильтр по названию сервиса.
      schema:
        type: string
    LogStartDateQueryParam:
      name: startDate
      in: query
      required: false
      description: Начало диапазона по времени (ISO 8601).
      schema:
        type: string
        format: date-time
    LogEndDateQueryParam:
      name: endDate
      in: query
      required: false
      description: Конец диапазона по времени (ISO 8601).
      schema:
        type: string
        format: date-time
    LogIdQueryParam:
      name: logId
      in: query
      required: false
      description: Точный идентификатор лога (Mongo ObjectId).
      schema:
        type: string
        pattern: '^[0-9a-fA-F]{24}$'
  schemas:
    AuthRequest:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          example: admin
        password:
          type: string
          example: secret
    AuthResponse:
      type: object
      required: [token]
      properties:
        token:
          type: string
          description: Сессионный токен, используемый в заголовке Authorization.
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    TelegramRecipient:
      type: object
      required: [chatId]
      properties:
        chatId:
          type: string
          description: Идентификатор пользователя Telegram.
          example: '123456789'
        tags:
          type: array
          description: Теги логов, для которых активны уведомления.
          items:
            type: string
          default: []
    TelegramSettings:
      type: object
      properties:
        enabled:
          type: boolean
          default: false
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/TelegramRecipient'
        antiSpamInterval:
          type: integer
          description: Интервал между уведомлениями в минутах.
          default: 15
          minimum: 1
    TelegramStatus:
      type: object
      required: [tokenProvided, botStarted]
      properties:
        tokenProvided:
          type: boolean
          description: Установлена ли переменная окружения `BOT_API_KEY`.
          example: true
        botStarted:
          type: boolean
          description: Удалось ли запустить бота и начать polling.
          example: true
    TelegramBotUrlInfo:
      type: object
      required: [url, source, botActive]
      properties:
        url:
          type: string
          nullable: true
          description: Публичная ссылка вида `https://t.me/<botname>` или `null`, если получить её не удалось.
          example: https://t.me/devinfotestbot
        source:
          type: string
          description: Источник данных о ссылке.
          enum: [env, telegram, inactive, unknown]
          example: env
        botActive:
          type: boolean
          description: Запущен ли бот и доступен ли Telegram API.
          example: true
    TelegramCommands:
      type: object
      required: [subscribe, unsubscribe]
      properties:
        subscribe:
          type: string
          nullable: true
          description: Команда для подписки вида `ADD:<UUID>`. Значение `null`, если уведомления отключены.
          example: ADD:123e4567-e89b-12d3-a456-426614174000
        unsubscribe:
          type: string
          nullable: true
          description: Команда для отписки вида `DELETE:<UUID>`. Значение `null`, если уведомления отключены.
          example: DELETE:123e4567-e89b-12d3-a456-426614174000
    ProjectInput:
      type: object
      required:
        - name
        - logFormat
        - defaultTags
        - customTags
        - accessLevel
        - telegramNotify
        - debugMode
        - maxLogEntries
      properties:
        name:
          type: string
          minLength: 3
          example: Orders Service
        description:
          type: string
        logFormat:
          type: object
          additionalProperties: true
          description: Схема входящего лога для отображения.
        defaultTags:
          type: array
          items:
            type: string
          default: [DEBUG, INFO, WARNING, ERROR, CRITICAL]
        customTags:
          type: array
          items:
            type: string
          default: []
        accessLevel:
          type: string
          enum: [global, whitelist, docker]
          default: global
        telegramNotify:
          $ref: '#/components/schemas/TelegramSettings'
        debugMode:
          type: boolean
          default: false
        maxLogEntries:
          type: integer
          minimum: 0
          default: 0
          description: Максимальное число логов, сохраняемых для проекта. Значение `0` отключает ограничение.
    Project:
      allOf:
        - $ref: '#/components/schemas/ProjectInput'
        - type: object
          required: [_id, uuid, createdAt, updatedAt, telegramCommands, telegramBot]
          properties:
            _id:
              type: string
              description: MongoDB идентификатор записи.
              example: 664fa0ce4a2f0f0012a12345
            uuid:
              type: string
              format: uuid
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
            telegramCommands:
              $ref: '#/components/schemas/TelegramCommands'
            telegramBot:
              $ref: '#/components/schemas/TelegramBotUrlInfo'
    LogMetadata:
      type: object
      properties:
        ip:
          type: string
        service:
          type: string
        user:
          type: string
        extra:
          type: object
          additionalProperties: true
    LogBody:
      type: object
      required: [level, message]
      properties:
        level:
          type: string
          example: ERROR
        message:
          type: string
        tags:
          type: array
          items:
            type: string
          default: []
        timestamp:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/LogMetadata'
    LogEntry:
      type: object
      properties:
        _id:
          type: string
          example: 6650f1c79b9af0001b0d1234
        projectUuid:
          type: string
          format: uuid
        level:
          type: string
        message:
          type: string
        tags:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time
        metadata:
          $ref: '#/components/schemas/LogMetadata'
        clientIP:
          type: string
          description: IP-адрес клиента, с которого получен лог.
    LogIngestResponse:
      allOf:
        - $ref: '#/components/schemas/LogEntry'
        - type: object
          properties:
            rateLimitPerMinute:
              type: integer
              minimum: 0
              description: Актуальный лимит запросов в минуту для проекта.
    LogIngestRequest:
      type: object
      required: [uuid, log]
      properties:
        uuid:
          type: string
          format: uuid
        log:
          $ref: '#/components/schemas/LogBody'
    ProjectLogResponse:
      type: object
      required: [project, logs]
      properties:
        project:
          $ref: '#/components/schemas/Project'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
    ProjectTelegramInfo:
      type: object
      required: [projectUuid, enabled, antiSpamInterval, recipients, commands, bot]
      properties:
        projectUuid:
          type: string
          format: uuid
        enabled:
          type: boolean
        antiSpamInterval:
          type: integer
          minimum: 1
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/TelegramRecipient'
        commands:
          $ref: '#/components/schemas/TelegramCommands'
        bot:
          $ref: '#/components/schemas/TelegramBotUrlInfo'
    PingServiceInput:
      type: object
      required: [name, url]
      properties:
        name:
          type: string
          minLength: 2
          example: Billing health-check
        url:
          type: string
          format: uri
          example: https://billing.example.com/health
        interval:
          type: integer
          minimum: 5
          maximum: 3600
          default: 60
        telegramTags:
          type: array
          items:
            type: string
          default: []
    PingServiceUpdateInput:
      type: object
      description: Укажите одно или несколько полей для обновления.
      minProperties: 1
      properties:
        name:
          type: string
          minLength: 2
        url:
          type: string
          format: uri
        interval:
          type: integer
          minimum: 5
          maximum: 3600
        telegramTags:
          type: array
          items:
            type: string
    PingService:
      allOf:
        - $ref: '#/components/schemas/PingServiceInput'
        - type: object
          properties:
            _id:
              type: string
              example: 6650f47f9d3ab00015a81234
            projectUuid:
              type: string
              format: uuid
            lastStatus:
              type: string
              enum: [ok, degraded, down]
            lastCheckedAt:
              type: string
              format: date-time
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    DeletePingServiceResponse:
      type: object
      required: [message, serviceId]
      properties:
        message:
          type: string
          example: Ping-сервис удален
        serviceId:
          type: string
          example: 6650f47f9d3ab00015a81234
    RemoveTelegramRecipientResponse:
      type: object
      required: [message, chatId, project]
      properties:
        message:
          type: string
          example: Получатель удален
        chatId:
          type: string
          description: Chat ID удаленного подписчика.
          example: '123456789'
        project:
          $ref: '#/components/schemas/Project'
    WhitelistPayload:
      type: object
      required: [ip]
      properties:
        ip:
          type: string
          example: 192.168.0.10
        description:
          type: string
    WhitelistEntry:
      allOf:
        - $ref: '#/components/schemas/WhitelistPayload'
        - type: object
          properties:
            _id:
              type: string
              example: 6650f669d4b5c00017da1234
            createdAt:
              type: string
              format: date-time
            isProtected:
              type: boolean
              description: Признак записи, добавленной автоматически через переменную ADMIN_IP.
    BlacklistPayload:
      type: object
      required: [ip, reason]
      properties:
        ip:
          type: string
          example: 203.0.113.10
        reason:
          type: string
          example: Подозрительная активность
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: Дата окончания блокировки. Укажите null для бессрочной блокировки.
    BlacklistUpdatePayload:
      type: object
      properties:
        ip:
          type: string
          example: 203.0.113.10
        reason:
          type: string
        expiresAt:
          type: string
          format: date-time
          nullable: true
          description: Новая дата окончания блокировки или null для бессрочной блокировки.
      minProperties: 1
    BlacklistEntry:
      allOf:
        - $ref: '#/components/schemas/BlacklistPayload'
        - type: object
          properties:
            _id:
              type: string
              example: 6650f669d4b5c00017da5678
            createdAt:
              type: string
              format: date-time
            updatedAt:
              type: string
              format: date-time
    DeleteBlacklistResponse:
      type: object
      required: [success]
      properties:
        success:
          type: boolean
          example: true
    RateLimitSettings:
      type: object
      required: [rateLimitPerMinute]
      properties:
        rateLimitPerMinute:
          type: integer
          minimum: 1
          example: 120
      description: Лимит применяется ко всем запросам, кроме проектов с уровнями доступа `whitelist` и `docker`.
    ErrorResponse:
      type: object
      required: [message]
      properties:
        message:
          type: string
          example: Требуется авторизация
        code:
          type: string
          description: Машинно-читабельный код ошибки, если он доступен.
          example: LOG_LIMIT_EXCEEDED
        details:
          description: Дополнительные сведения об ошибке (могут отсутствовать).
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            details:
              description: Детали валидации с информацией по полям.
              example:
                fieldErrors:
                  name: ['String must contain at least 3 character(s)']
